{"version":3,"sources":["mapStyles.js","main.js"],"names":[],"mappingsfile":"main.js","sourcesContent":["const styles = [{\n        \"featureType\": \"all\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"all\",\n        \"elementType\": \"labels\",\n        \"stylers\": [{\n            \"visibility\": \"simplified\"\n        }]\n    }, {\n        \"featureType\": \"all\",\n        \"elementType\": \"labels.text\",\n        \"stylers\": [{\n            \"visibility\": \"simplified\"\n        }]\n    }, {\n        \"featureType\": \"administrative\",\n        \"elementType\": \"labels\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"administrative\",\n        \"elementType\": \"labels.text\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"administrative.country\",\n        \"elementType\": \"all\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"administrative.country\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [{\n            \"visibility\": \"on\"\n        }]\n    }, {\n        \"featureType\": \"administrative.country\",\n        \"elementType\": \"labels\",\n        \"stylers\": [{\n            \"visibility\": \"on\"\n        }, {\n            \"saturation\": \"-70\"\n        }, {\n            \"lightness\": \"24\"\n        }, {\n            \"gamma\": \"5\"\n        }]\n    }, {\n        \"featureType\": \"administrative.country\",\n        \"elementType\": \"labels.text.stroke\",\n        \"stylers\": [{\n            \"visibility\": \"on\"\n        }]\n    }, {\n        \"featureType\": \"administrative.province\",\n        \"elementType\": \"all\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"administrative.province\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"administrative.locality\",\n        \"elementType\": \"labels\",\n        \"stylers\": [{\n            \"visibility\": \"on\"\n        }]\n    }, {\n        \"featureType\": \"administrative.locality\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"administrative.locality\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"administrative.locality\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [{ color: '#d59563' }]\n\n    }, {\n        \"featureType\": \"administrative.neighborhood\",\n        \"elementType\": \"all\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"administrative.neighborhood\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"administrative.land_parcel\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"administrative.land_parcel\",\n        \"elementType\": \"labels\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"landscape\",\n        \"elementType\": \"all\",\n        \"stylers\": [{\n            \"visibility\": \"on\"\n        }]\n    }, {\n        \"featureType\": \"landscape\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"landscape.man_made\",\n        \"elementType\": \"all\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    },\n    // {\n    //     \"featureType\": \"landscape.man_made\",\n    //     \"elementType\": \"geometry\",\n    //     \"stylers\": [\n    //         {\n    //             \"color\": \"#f7f1df\"\n    //         }\n    //     ]\n    // },\n    {\n        \"featureType\": \"landscape.natural\",\n        \"elementType\": \"all\",\n        \"stylers\": [{\n            \"visibility\": \"simplified\"\n        }]\n    }, {\n        \"featureType\": \"landscape.natural\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [{\n            \"color\": \"#d0e3b4\"\n        }]\n    }, {\n        \"featureType\": \"landscape.natural\",\n        \"elementType\": \"labels\",\n        \"stylers\": [{\n            \"visibility\": \"on\"\n        }]\n    }, {\n        \"featureType\": \"landscape.natural.landcover\",\n        \"elementType\": \"all\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"landscape.natural.terrain\",\n        \"elementType\": \"all\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"landscape.natural.terrain\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [{\n            \"visibility\": \"on\"\n        }]\n    }, {\n        \"featureType\": \"poi\",\n        \"elementType\": \"all\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"poi\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"poi\",\n        \"elementType\": \"labels\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"poi.business\",\n        \"elementType\": \"all\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"poi.medical\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [{\n            \"color\": \"#fbd3da\"\n        }]\n    }, {\n        \"featureType\": \"poi.park\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [{\n            \"color\": \"#bde6ab\"\n        }]\n    }, {\n        \"featureType\": \"road\",\n        \"elementType\": \"all\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"road\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"road\",\n        \"elementType\": \"labels\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [{\n            \"color\": \"#ffe15f\"\n        }]\n    }, {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [{\n            \"color\": \"#efd151\"\n        }]\n    }, {\n        \"featureType\": \"road.arterial\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [{\n            \"color\": \"#ffffff\"\n        }]\n    }, {\n        \"featureType\": \"road.local\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [{\n            \"color\": \"black\"\n        }]\n    }, {\n        \"featureType\": \"transit\",\n        \"elementType\": \"all\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }, {\n        \"featureType\": \"transit.station.airport\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [{\n            \"color\": \"#cfb2db\"\n        }]\n    }, {\n        \"featureType\": \"water\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [{\n            \"color\": \"#91c9f7\"\n        }]\n    }, {\n        \"featureType\": \"water\",\n        \"elementType\": \"labels\",\n        \"stylers\": [{\n            \"visibility\": \"off\"\n        }]\n    }];","\nconst month = new Array();\n    month[0] = \"January\";\n    month[1] = \"February\";\n    month[2] = \"March\";\n    month[3] = \"April\";\n    month[4] = \"May\";\n    month[5] = \"June\";\n    month[6] = \"July\";\n    month[7] = \"August\";\n    month[8] = \"September\";\n    month[9] = \"October\";\n    month[10] = \"November\";\n    month[11] = \"December\";\n\n(function (global) {\n\n\n    var menuToggle = document.querySelector('.header__nav-menu-button');\n    var menu = document.querySelector('.header__row');\n\n    window.addEventListener('resize', function () {\n        console.log('resize!');\n        var intViewportWidth = window.innerWidth;\n        if (intViewportWidth > 899) {\n            clearTimeout(resizeTimeout);\n            var resizeTimeout = setTimeout(function () {\n                menu.classList.remove(\"show\");\n            }, 200);\n        }\n    });\n\n\n\n    menuToggle.addEventListener('click', function () {\n        menu.classList.toggle('show');\n    });\n\n    // Get the modal\n    var modal = document.getElementById('myModal');\n\n    // Get the button that opens the modal\n    var galleryButtons = Array.from(document.querySelectorAll('.battle__gallery-thumb'));\n\n    console.log(modal);\n    console.log(galleryButtons)\n    // Get the <span> element that closes the modal\n    var span = document.querySelector('.modal__close');\n\n    // When the user clicks on the button, open the modal \n    galleryButtons.forEach( (btn) => {\n        btn.addEventListener('click', function(e) {\n            modal.style.display = \"block\";\n        })    \n    });\n    // btn.onclick = function() {\n\n    // }\n\n    // When the user clicks on <span> (x), close the modal\n    span.onclick = function() {\n        modal.style.display = \"none\";\n    }\n\n    // When the user clicks anywhere outside of the modal, close it\n    window.onclick = function(event) {\n        if (event.target == modal) {\n            modal.style.display = \"none\";\n        }\n    }\n\n\n})(window);\n\nfunction initMap() {\n    console.log('initialize map!');\n    const markers = [];\n    var map,\n\n\n    map = new google.maps.Map(document.getElementById('map'), {\n        center: { lat: 48.4085152, lng: 9.9428302 },\n        zoom: 5,\n        styles: styles,\n        mapTypeControl: false\n    });\n\n    function createMarkerList(battles) {\n        // console.log(route)\n        var largeInfowindow = new google.maps.InfoWindow();\n        // Style the markers a bit. This will be our listing marker icon.\n        var defaultIcon = '/static/img/battle_symbol.png';\n        // this.makeMarkerIcon('0091ff');\n\n        // Create a \"highlighted location\" marker color for when the user\n        // mouses over the marker.\n        var highlightedIcon = '/static/img/battle_symbol_hover.png';\n\n        // The following group uses the location array to create an array of markers on initialize.\n        for (var i = 0; i < battles.length; i++) {\n            // Get the position from the location array.\n            var position = battles[i].location;\n            var title = battles[i].title;\n            var campaign = battles[i].campaign;\n            var result = battles[i].result;\n            var date = battles[i].date;\n            console.log(date);\n            // Create a marker per location, and put into markers array.\n            var marker = new google.maps.Marker({\n                position: position,\n                title: title,\n                campaign: campaign,\n                date: date, \n                result: result,\n                animation: google.maps.Animation.DROP,\n                icon: defaultIcon,\n                id: i\n            });\n            console.log(marker);\n\n            // Push the marker to our array of markers.\n            markers.push(marker);\n\n            console.log(markers);\n            // Create an onclick event to open the large infowindow at each marker.\n            marker.addListener('click', function () {\n                console.log(this);\n                populateInfoWindow(this, largeInfowindow);\n            });\n            // Two event listeners - one for mouseover, one for mouseout,\n            // to change the colors back and forth.\n            marker.addListener('mouseover', function () {\n                this.setIcon(highlightedIcon);\n            });\n            marker.addListener('mouseout', function () {\n                this.setIcon(defaultIcon);\n            });\n        }\n        // if(route) {\n        //     this.createRoute(route);\n        // }\n        showListings(battles);\n    }  // end markers\n    \n    function dateFormat(dateObj) {\n\n        var start = new Date(dateObj.start);\n        var end = (dateObj.end) ? new Date(dateObj.end) : null;\n\n        console.log(start, end)\n        \n        if(!end) {\n            return `${month[start.getMonth()]} ${start.getDate()} ${start.getFullYear()}`\n        } else if(start.getFullYear() === end.getFullYear() && start.getMonth() === end.getMonth()) {\n            return `${month[start.getMonth()]} ${start.getDate()} to ${end.getDate()} ${start.getFullYear()}`            \n        }\n    }\n    \n    function populateInfoWindow(marker, infowindow) {\n        // Check to make sure the infowindow is not already opened on this marker.\n        if (infowindow.marker != marker) {    \n          // Clear the infowindow content to give the streetview time to load.\n          infowindow.setContent('');\n          infowindow.marker = marker;\n          // Make sure the marker property is cleared if the infowindow is closed.\n          infowindow.addListener('closeclick', function() {\n            infowindow.marker = null;\n          });\n          infowindow.setContent(`<div class=\"info-window\">\n                                    <h2>  ${marker.title} </h2>\n                                    <h5> ${dateFormat(marker.date)}</h5>\n                                    <a href=\"https://napoleon-era-wiki.herokuapp.com/campaigns/${marker.campaign}/${marker.title} \"class=\"button\">Learn More</a>\n                                    <p> ${marker.result} </p>\n                                </div>`);\n\n          // Open the infowindow on the correct marker.\n          infowindow.open(map, marker);                            \n        }\n    }\n    \n    \n    function showListings(info) {\n        \n        var bounds = new google.maps.LatLngBounds();\n        markers.forEach( (marker) => {\n          marker.setMap(map);\n          bounds.extend(marker.position);            \n        })\n        map.fitBounds(bounds);\n             \n    }\n\n    var data = [{ \"title\": \"Battle of Ulm\", \"location\": { \"lat\": 48.4085152, \"lng\": 9.9428302 }, \"date\": { \"start\": \"1805-10-15\", \"end\": \"1805-10-20\" }, \"result\": \"Decisive French victory\" }, { \"title\": \"Battle of Trafalgar\", \"location\": { \"lat\": 36.327282, \"lng\": -6.215012 }, \"date\": { \"start\": \"1805-10-21\" }, \"result\": \"Decisive British victory\" }, { \"title\": \"Battle of Austerlitz\", \"location\": { \"lat\": 49.1410606, \"lng\": 16.7668404 }, \"date\": { \"start\": \"1805-12-02\" }, \"result\": \"Decisive French victory\" }];\n\n    console.log(local_data);\n    const battlesArray = []\n\n    for (var prop in local_data.battles) {\n        console.log(prop);\n        battlesArray.push(local_data.battles[prop])\n    }\n\n    console.log(battlesArray);\n\n    createMarkerList(battlesArray, null, null);\n}\n\n\n\n// getLocalData(local_data.battles);\n\n// function getLocalData(data) {\n//     console.log(data)\n//     const \n// }\n\n// var google = google || null;\n\n// if(google) {\n//   initMap();  \n// }\n\n\n//# sourceMappingURL=main.js.map"]}